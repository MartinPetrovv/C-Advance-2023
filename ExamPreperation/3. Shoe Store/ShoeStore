using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Security.Cryptography.X509Certificates;
using System.Threading;

namespace ShoeStore
{
    public class ShoeStore
    {
        public ShoeStore(string name, int storageCapacity)
        {
            Name = name;
            StorageCapacity = storageCapacity;
            List<Shoe> Shoes = new List<Shoe>();
        }

         

        public string Name { get; set; }
        public int StorageCapacity { get; set; }
        public  List<Shoe> Shoes { get; set; }
        
        public int Count => Shoes.Count;

        public string AddShoe(Shoe shoe)
        {
            if (StorageCapacity<Shoes.Count)
            {
                Shoes.Add(shoe);
                return $"Successfully added {shoe.Type} {shoe.Material} pair of shoes to the store.";
            }
            return "No more space in the storage room.";
        }

        public int RemoveShoes(string material) => Shoes.RemoveAll(x=>x.Material == material);

        public List<Shoe> GetShoesByType(string type) => Shoes.FindAll(x => x.Type == type.ToLower());
        //public List<Shoe> GetShoesByType(string type) => Shoes.FindAll(x => string.Equals(x.Type, type, StringComparison.OrdinalIgnoreCase));

        public Shoe GetShoeBySize(double size) => Shoes.FirstOrDefault(x => x.Size == size);

        public string StockList(double size, string type)
        {
            var matchingShoes = Shoes
                .Where(shoe => string.Equals(shoe.Type, type, StringComparison.OrdinalIgnoreCase) && shoe.Size == size)
                .ToList();

            if (matchingShoes.Count > 0)
            {
                string result = $"Stock list for size {size} - {type} shoes:{Environment.NewLine}";
                result += string.Join(Environment.NewLine, matchingShoes);
                return result;
            }
            else
            {
                return "No matches found!";
            }

        }


    }
}
