
int size = int.Parse(Console.ReadLine());

if (size <3)
{
    Console.WriteLine(0);
    return;
    
}

int countRemoved = 0;

char[,] matrix = new char[size, size];

for (int row = 0; row < size; row++)
{
    
    char[] symbols = Console.ReadLine().ToArray();

    for (int col = 0; col < size; col++)
    {
        matrix[row, col] = symbols[col];
    }
}

while (true)
{
    int maxAttacks = 0;
    int rowMaxAttacked = 0;
    int colMaxAttacked = 0;

    for (int row = 0; row < size; row++)
    {
        for (int col = 0; col < size; col++)
        {
            char currentElement = matrix[row, col];
            if (currentElement == 'K')
            {
                int countAttackedKnights = CalculateAttackedKnight(row, col, size, matrix);

                if (countAttackedKnights > maxAttacks)
                {
                    maxAttacks= countAttackedKnights;
                    rowMaxAttacked = row;
                    colMaxAttacked= col;
                }
            }
        }
    }

    if (maxAttacks==0)
    {
        break;
    }
    else
    {
        matrix[rowMaxAttacked, colMaxAttacked] = '0';
        countRemoved++;
    }
}
Console.WriteLine(countRemoved);

static int CalculateAttackedKnight(int row, int col, int size, char[,] matrix)
{
    int count = 0;
    if (IsValid(row -2, col +1, size))
    {
        if (matrix[row-2, col +1] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row - 2, col -1, size))
    {
        if (matrix[row - 2, col - 1] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row + 2, col - 1, size))
    {
        if (matrix[row + 2, col - 1] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row + 2, col + 1, size))
    {
        if (matrix[row + 2, col + 1] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row -1, col + 2, size))
    {
        if (matrix[row -1, col +2] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row + 1, col + 2, size))
    {
        if (matrix[row + 1, col + 2] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row - 1, col - 2, size))
    {
        if (matrix[row - 1, col - 2] == 'K')
        {
            count++;
        }
    }
    if (IsValid(row + 1, col - 2, size))
    {
        if (matrix[row + 1, col - 2] == 'K')
        {
            count++;
        }
    }
    return count;
}
static bool IsValid(int row, int col, int size)
{
    return row >=0 && row < size && col >= 0 && col < size;

}

/*
5
0K0K0
K000K
00K00
K000K
0K0K0
*/
