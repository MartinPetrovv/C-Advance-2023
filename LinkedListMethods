using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinkedList
{
    public  class SoftUniLinkedList
    {
       
        public Node Head { get; set; }
        public Node Tail { get; set; }

        public void AddLast(int nodeValue)
        {
            Node newNode = new Node (nodeValue);
            if (Head == null)
            {
                Head = newNode;
                Tail= newNode;
                return;
            }
            newNode.Previous = Tail;
            Tail.Next = newNode;
            Tail = newNode;
            
        }

        public void AddFirst(int nodeValue)
        {

            Node newNode = new Node (nodeValue);

            if (Head == null)
            {
                Head= newNode;
                Tail = newNode;
                return;
            }

            newNode.Next = Head;
            Head.Previous = newNode;
            Head = newNode;
            
        }

        public Node RemoveLast()
        {
            Node nodeToRemove = Tail;
            Tail = Tail.Previous;
            Tail.Next = null;
            nodeToRemove.Previous = null;

            return nodeToRemove;

        }

        public Node RemoveFirst()
        {
            Node nodeToRemove= Head;

            Head = Head.Next;
            Head.Previous = null;
            nodeToRemove.Next = null;

            return nodeToRemove;

        }

    }
}


//SoftUniLinkedList linkedList = new SoftUniLinkedList();

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace LinkedList
//{
//    public class Node
//    {
//        public Node(int value)
//        {
//            Value = value;
            
//        }
        
//        public int Value { get; set; }
//        public Node Next { get; set; }
//        public Node Previous { get; set; }

//        public override string ToString()
//        {
//            return $"{Previous.Value} <- {Value} -> {Next.Value}";
//        }
//    }
//}




